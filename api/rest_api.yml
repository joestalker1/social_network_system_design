openapi: 3.0.3
info:
  title: Social Network - OpenAPI 3.0
  description: Social Network API
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://social_network.swagger.io/api/v3
tags:
  - name: social_network
    description: Social Networwork API
paths:
  /v1/user:
    post:
      tags:
        - user
      summary: Add a user
      description: Add a user
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
  /v1/user/{userId}:
    get:
      tags:
        - user
      summary: find a user
      description: find a user
      operationId: findUser
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '404':
          description: user is not found
  /v1/user/{userId}:
    delete:
      tags:
        - user
      summary: delete a user
      description: delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: user is not found
  /v1/user/{userId}/{relationship_type}/{otherUserId}:
    post:
      tags:
        - user
      summary: Add a friend
      description: Add a friend,lover or follower
      operationId: addFriend
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
        - name: relationship_type
          in: path
          description: lover,friend or follower
          required: true
          schema:
            type: string
        - name: otherUserId
          in: path
          description: lover,friend or follower id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
        '404':
          description: user is not found
  /v1/user/{userId}/{relationship_type}/{otherUserId}:
    delete:
      tags:
        - user
      summary: Delete friend,lover or follower
      operationId: deleteFriend
      parameters:
        - name: userId
          in: path
          description: id of current user
          required: true
          explode: true
          schema:
            type: string
            default: available
        - name: relationship_type
          in: path
          description: friend,lover or follower
          required: true
          explode: true
          schema:
            type: string
            default: available
        - name: otherUserId
          in: path
          description: friend,lover or follower id
          required: true
          explode: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: successful operation
        '404':
          description: User is not found
  /v1/user/{userId}/post:
    post:
      tags:
        - user
      summary: publish a post
      description: Publish a post
      operationId: addPost
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new contact list record
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedPost'
        '404':
          description: user is not found
  /v1/post/{postId}:
    get:
      tags:
        - post
      summary: get a post
      description: get a post
      operationId: getPost
      parameters:
        - name: postId
          in: path
          description: ID of current post
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedPost'
        '404':
          description: post is not found
  /v1/post/{postId}:
    get:
      tags:
        - post
      summary: get a post
      description: get a post
      operationId: getPost
      parameters:
        - name: postId
          in: path
          description: ID of current post
          required: true
          schema:
            type: string
        - comment_number:
          in: query
          description: show first number of comments
          required: false
          schema: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedPost'
        '404':
          description: post is not found
  /v1/post/{postId}:
    delete:
      tags:
        - post
      summary: delete a post
      description: Delete a post
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          description: ID of post
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: 'post is not found'
  /v1/post/{postId}/comment:
    post:
      tags:
        - post
      summary: add a comment to a post
      description: add a comment
      operationId: addComment
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
        - name: postId
          in: path
          description: ID of post
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedComment'
        '404':
          description: post is not found
  /v1/comment/{commentId}:
    delete:
      tags:
        - comment
      summary: delete a comment
      description: Delete a comment
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          description: ID of comment
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: comment is not found
  /v1/comment/{postId}:
    get:
      tags:
        - comment
      summary: delete a comment
      description: get a comment
      operationId: getComment
      parameters:
        - name: postId
          in: path
          description: ID of post
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: start from comment
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: comment number to show
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedComment'
        '404':
          description: post is not found
  /v1/chat/{userId}/{toUserId}:
    post:
      tags:
        - post
      summary: send a message
      description: send a message
      operationId: sendMessage
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
        - name: toUserId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
      requestBody:
        description: Send a message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedMessage'
        '404':
          description: user is not found
  /v1/chat/{chatId}:
    get:
      tags:
        - post
      summary: get a message
      description: get a message
      operationId: getMessage
      parameters:
        - name: chatId
          in: path
          description: ID of chat
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: start message
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: message number to show
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedMessage'
        '404':
          description: chat is not found
components:
  schemas:
    CreatedUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        city:
          type: string
        created_at:
          type: integer
          format: timestamp
        photo_url:
          type: string
    NewUser:
      type: object
      properties:
        name:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        city:
          type: string
        photo:
          type: string
          format: byte
    NewPost:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        description:
          type: string
        media:
          type: string
          format: byte
        likes:
          type: integer
        dislikes:
          type: integer
        hashtags:
          type: string
        watched_times:
          type: integer
    CreatedPost:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        description:
          type: string
        media_url:
          type: string
        likes:
          type: integer
        dislikes:
          type: integer
        hashtags:
          type: string
        watched_times:
          type: integer
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CreatedComment'
    NewComment:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        post_id:
          type: integer
          format: int64
        description:
          type: string
    CreatedComment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        post_id:
          type: integer
          format: int64
        description:
          type: string
        created_at:
          type: integer
          format: timestamp
    NewMessage:
      type: object
      properties:
        from_user_id:
          type: integer
          format: int64
        to_user_id:
          type: integer
          format: int64
        message:
          type: string
    CreatedMessage:
      type: object
      properties:
        id:
          type: integer
          format: int64
        chat_id:
          type: integer
          format: int64
        text:
          type: string
        read_cnt:
          type: integer
          format: int64