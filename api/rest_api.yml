openapi: 3.0.3
info:
  title: Social Network - OpenAPI 3.0
  description:
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: social_network
    description: Social Networwork API
paths:
  /v1/user/{userId}/friend/{id}:
    post:
      tags:
        - user
      summary: Add a friend
      description: Add a friedn to contact list
      operationId: addFriend
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
      parameters:
        - name: id
          in: path
          description: ID of user to add
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new contact list record
        content:
          application/json:
            schema:
              $ref: '#/components/schema/User'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user is not found
  /v1/user/{userId}/friend/{id}:
    delete:
      tags:
        - user
      summary: Delete user from user contact lis
      operationId: deleteFriend
      parameters:
        - name: userId
          in: path
          description: id of current user
          required: true
          explode: true
          schema:
            type: string
            default: available
      parameters:
        - name: id
          in: path
          description: id of user is going be deleted
          required: true
          explode: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: successful operation
        '404':
          description: User is not found
  /v1/user/{userId}/friends:
    get:
      tags:
        - user
      summary: Get all user friends
      operationId: getAllFriends
      parameters:
        - name: userId
          in: path
          description: id of current user
          required: true
          explode: true
          schema:
            type: string
            default: available
        responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

        '404':
          description: User is not found
  /v1/user/{userId}/profile:
    get:
      tags:
        - user
      summary: Get user profile
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: User not found
  /v1/posts
  post:
    tags:
      - post
    summary: Add new post
    operationId: addPost
    requestBody:
      description: Create a new post
      content:
        application/json:
          schema:
            $ref: '#/components/schema/Post'
      required: true
    responses:
      '201':
        description: Successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
      '404':
        description: user not found
  /v1/posts/{id}/file
  post:
    tags:
      - post
    summary: Add a file to post
    operationId: addFileToPost
    requestBody:
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
      required: true
    responses:
      '201':
        description: Successful operation
      '404':
        description: Post not found
  /v1/timeline/home
get:
  tags:
    - timeline
  summary: Get a home timeline
  operationId: getHomeTimeline
  operationId: addFileToPost
  parameters:
    - name: offset
      in: query
      description: offset to start from
      required: true
      explode: true
      schema:
        type: string
        default: available
    - name: limit
      in: query
      description: number of post to download
      required: true
      explode: true
      schema:
        type: string
        default: available

  responses:
    '200':
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
    '404':
      description: User not found
  security:
    - api_key: []
  /v1/timeline/{userId}
get:
  tags:
    - timeline
  summary: Get a user timeline
  operationId: getUserTimeline
  parameters:
    - name: offset
      in: query
      description: offset to start from
      required: true
      explode: true
      schema:
        type: string
        default: available
    - name: limit
      in: query
      description: number of post to download
      required: true
      explode: true
      schema:
        type: string
        default: available
    - name: userId
      in: path
      description: id of a post
      required: true
      explode: true
      schema:
        type: string
        default: available
  requestBody:
    description: Get timeline
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
    required: true
  responses:
    '200':
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
    '404':
      description: User not found
  /v1/chat/{chatId}/messages
get:
  tags:
    - chat
  summary: Get a user chat messages
  operationId: getUserChatMessages
  parameters:
    - name: chatId
      in: path
      description: id of a chatId
      required: true
      explode: true
      schema:
        type: string
        default: available
    - name: offset
      in: query
      description: offset to start from
      required: true
      explode: true
      schema:
        type: string
        default: available
    - name: limit
      in: query
      description: number of post to download
      required: true
      explode: true
      schema:
        type: string
        default: available
    - name: userId
      in: query
      description: id of a user
      required: true
      explode: true
      schema:
        type: string
        default: available
  responses:
    '200':
      description: Successful operation
      content:
        application/json:
          type: array
          schema:
            $ref: '#/components/schemas/Message'
    '404':
      description: User not found
  /v1/chat/{chatId}/messages
post:
  tags:
    - chat
  summary: Post a message
  operationId: postChatMessages
  parameters:
    - name: chatId
      in: path
      description: id of a chatId
      required: true
      explode: true
      schema:
        type: string
        default: available
  requestBody:
    description: Message
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
  responses:
    '201':
      description: Successful operation
    '404':
      description: chat not found
components:
  schemas:
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        fromUserId:
          type: string
        toUserId:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 198772
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        mediaFileId:
          type: string
      Profile:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 10
          userId:
            type: integer
            format: int64
            example: 198772
          sex:
            type: string
          habbits:
            type: string
          createdAt:
            type: string
            format: date-time
          lastLoggedIn:
            type: string
            format: date-time
          likes:
            type: integer
            format: int64
          dislikes:
            type: integer
            format: int64
          friends:
            type: integer
            format: int64
          status:
            type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header